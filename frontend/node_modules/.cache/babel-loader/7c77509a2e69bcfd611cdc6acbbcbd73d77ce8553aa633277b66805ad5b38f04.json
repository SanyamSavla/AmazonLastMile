{"ast":null,"code":"var _jsxFileName = \"/Users/stlp/Desktop/amazon/frontend/src/components/AuditPage/AuditPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../Header/Header'; // Corrected path\nimport Navigation from '../Navigation/Navigation'; // Corrected path\nimport Table from '../Table/Table'; // Corrected path\nimport Footer from '../Footer/Footer'; // Corrected path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuditPage = () => {\n  _s();\n  const tabs = ['Inbound', 'Staging', 'Loading', 'Parking', 'Module 5', 'Module 6', 'Module 7'];\n  const [activeTab, setActiveTab] = useState('Inbound');\n  const [data, setData] = useState([]);\n  // const [data, setData] = useState([\n  //   { attribute: 'induct_mechanism', currentValue: 14, actualValue: '', comments: '', flagAsKDI: false },\n  //   { attribute: 'city', currentValue: 5, actualValue: '', comments: '', flagAsKDI: false },\n  //   { attribute: 'Staging locations', currentValue: 16, actualValue: '', comments: '', flagAsKDI: false },\n  //   { attribute: 'No of dock doors', currentValue: 24, actualValue: '', comments: '', flagAsKDI: false },\n  //   // ... more rows\n  // ]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        //${activeTab}\n        const response = await fetch(`http://localhost:8000/get/DQQ1`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const fetchedData = await response.json();\n        // console.log(\"fetchedData\");\n        // console.log(fetchedData);\n        // Update the state with the new values from the fetched data\n        const updatedData = Object.keys(fetchedData).map(key => ({\n          attribute: key,\n          currentValue: fetchedData[key],\n          // Assume the fetched data has the current values\n          actualValue: '',\n          // If your fetched data contains actual values, replace '' with fetchedData[key + '_actual'] or the correct key\n          comments: '',\n          // If your fetched data contains comments, replace '' with the correct value\n          flagAsKDI: false // Set this based on your fetched data if applicable\n        }));\n        console.log(updatedData);\n        setData(updatedData);\n        // setData(currentData =>\n        //   currentData.map(item => ({\n        //     ...item,\n        //     currentValue: fetchedData[item.attribute] , // Replace with the new value, or fallback to the current value if undefined\n        //     // actualValue: fetchedData[item.attribute] || item.actualValue,   // Replace with the new value, or fallback to the current value if undefined\n        //     // You can add additional fields to update as needed\n        //   }))\n        // );\n      } catch (error) {\n        console.error('There has been a problem with your fetch operation:', error);\n      }\n    };\n    fetchData();\n  }, [activeTab]);\n  // Handlers for Footer\n  const handleHoldDeployment = () => {\n    // Logic to hold deployment\n  };\n  const handleSave = () => {\n    // Logic to save data\n  };\n  const handleComplete = () => {\n    // Logic to mark as complete\n  };\n\n  // return (\n  //   <>\n  //     <Header />\n  //     <Navigation tabs={['Inbound', 'Staging', 'Loading', 'Parking', 'Module 5', 'Module 6', 'Module 7']} activeTab={activeTab} setActiveTab={setActiveTab} />\n  //     <div className=\"content\">\n  //       <Table data={data} setData={setData} />\n  //     </div>\n  //     <Footer />\n  //     {/* ... */}\n  //   </>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [item.attribute, \": \", item.currentValue]\n    }, item.attribute, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(AuditPage, \"9Buy8DxJo6dGdRrViglDSV916pg=\");\n_c = AuditPage;\nexport default AuditPage;\nvar _c;\n$RefreshReg$(_c, \"AuditPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","Navigation","Table","Footer","jsxDEV","_jsxDEV","AuditPage","_s","tabs","activeTab","setActiveTab","data","setData","fetchData","response","fetch","ok","Error","fetchedData","json","updatedData","Object","keys","map","key","attribute","currentValue","actualValue","comments","flagAsKDI","console","log","error","handleHoldDeployment","handleSave","handleComplete","children","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stlp/Desktop/amazon/frontend/src/components/AuditPage/AuditPage.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\nimport Header from '../Header/Header'; // Corrected path\nimport Navigation from '../Navigation/Navigation'; // Corrected path\nimport Table from '../Table/Table'; // Corrected path\nimport Footer from '../Footer/Footer'; // Corrected path\n\nconst AuditPage = () => {\n  const tabs = ['Inbound', 'Staging', 'Loading', 'Parking', 'Module 5', 'Module 6', 'Module 7'];\n  const [activeTab, setActiveTab] = useState('Inbound');\n  const [data, setData] = useState([]); \n  // const [data, setData] = useState([\n  //   { attribute: 'induct_mechanism', currentValue: 14, actualValue: '', comments: '', flagAsKDI: false },\n  //   { attribute: 'city', currentValue: 5, actualValue: '', comments: '', flagAsKDI: false },\n  //   { attribute: 'Staging locations', currentValue: 16, actualValue: '', comments: '', flagAsKDI: false },\n  //   { attribute: 'No of dock doors', currentValue: 24, actualValue: '', comments: '', flagAsKDI: false },\n  //   // ... more rows\n  // ]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try { //${activeTab}\n        const response = await fetch(`http://localhost:8000/get/DQQ1`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const fetchedData = await response.json();\n        // console.log(\"fetchedData\");\n        // console.log(fetchedData);\n        // Update the state with the new values from the fetched data\n        const updatedData = Object.keys(fetchedData).map(key => ({\n          attribute: key,\n          currentValue: fetchedData[key], // Assume the fetched data has the current values\n          actualValue: '', // If your fetched data contains actual values, replace '' with fetchedData[key + '_actual'] or the correct key\n          comments: '', // If your fetched data contains comments, replace '' with the correct value\n          flagAsKDI: false, // Set this based on your fetched data if applicable\n        }));\n        console.log(updatedData);\n        setData(updatedData);\n        // setData(currentData =>\n        //   currentData.map(item => ({\n        //     ...item,\n        //     currentValue: fetchedData[item.attribute] , // Replace with the new value, or fallback to the current value if undefined\n        //     // actualValue: fetchedData[item.attribute] || item.actualValue,   // Replace with the new value, or fallback to the current value if undefined\n        //     // You can add additional fields to update as needed\n        //   }))\n        // );\n\n      } catch (error) {\n        console.error('There has been a problem with your fetch operation:', error);\n      }\n    };fetchData();\n  }, [activeTab]);\n  // Handlers for Footer\n  const handleHoldDeployment = () => {\n    // Logic to hold deployment\n  };\n\n  const handleSave = () => {\n    // Logic to save data\n  };\n\n  const handleComplete = () => {\n    // Logic to mark as complete\n  };\n\n  // return (\n  //   <>\n  //     <Header />\n  //     <Navigation tabs={['Inbound', 'Staging', 'Loading', 'Parking', 'Module 5', 'Module 6', 'Module 7']} activeTab={activeTab} setActiveTab={setActiveTab} />\n  //     <div className=\"content\">\n  //       <Table data={data} setData={setData} />\n  //     </div>\n  //     <Footer />\n  //     {/* ... */}\n  //   </>\n  // );\n  return (\n    <div>\n      {/* ... */}\n      {data.map(item => (\n        <div key={item.attribute}>\n          {item.attribute}: {item.currentValue}\n          {/* Render other item properties as needed */}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default AuditPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AACjD,OAAOC,MAAM,MAAM,kBAAkB,CAAC,CAAC;AACvC,OAAOC,UAAU,MAAM,0BAA0B,CAAC,CAAC;AACnD,OAAOC,KAAK,MAAM,gBAAgB,CAAC,CAAC;AACpC,OAAOC,MAAM,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,IAAI,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;EAC7F,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAAE;QACJ,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+B,CAAC;QAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACzC;QACA;QACA;QACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACJ,WAAW,CAAC,CAACK,GAAG,CAACC,GAAG,KAAK;UACvDC,SAAS,EAAED,GAAG;UACdE,YAAY,EAAER,WAAW,CAACM,GAAG,CAAC;UAAE;UAChCG,WAAW,EAAE,EAAE;UAAE;UACjBC,QAAQ,EAAE,EAAE;UAAE;UACdC,SAAS,EAAE,KAAK,CAAE;QACpB,CAAC,CAAC,CAAC;QACHC,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC;QACxBR,OAAO,CAACQ,WAAW,CAAC;QACpB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAEF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;MAC7E;IACF,CAAC;IAACnB,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EACf;EACA,MAAMwB,oBAAoB,GAAGA,CAAA,KAAM;IACjC;EAAA,CACD;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB;EAAA,CACD;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B;EAAA,CACD;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACE9B,OAAA;IAAA+B,QAAA,EAEGzB,IAAI,CAACY,GAAG,CAACc,IAAI,iBACZhC,OAAA;MAAA+B,QAAA,GACGC,IAAI,CAACZ,SAAS,EAAC,IAAE,EAACY,IAAI,CAACX,YAAY;IAAA,GAD5BW,IAAI,CAACZ,SAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGnB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClC,EAAA,CAhFID,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAkFf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}