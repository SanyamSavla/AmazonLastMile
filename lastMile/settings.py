"""
Django settings for web_project project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import os
from dotenv import load_dotenv
# load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--f+k*ef4j&t#u64r5)3kdsxtjx@ha_&vas7e80ekiocd2vic6u'
# SECRET_KEY = os.environ.get("RDS_SECRET_NAME")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['10.19.128.82', 'localhost', '127.0.0.1',"*"]


import boto3
from botocore.exceptions import ClientError
import json
import os
# session = boto3.session.Session()
# client = session.client(service_name='secretsmanager', region_name='us-west-2')

# # Retrieve RDS credentials from AWS Secrets Manager
# get_secret_value_response = client.get_secret_value(SecretId='rds!cluster-bcbf87b1-2088-4036-bf5c-4c6d96d1042c')
# rds_credentials = json.loads(get_secret_value_response['SecretString'])



# # Application definition
# rds_client = boto3.client('rds',region_name='us-west-2')

#     # Describe RDS instances
# response = rds_client.describe_db_instances()

#     # Process the response
# instances = response['DBInstances']
# print(instances)
# for instance in instances:
#         print(f"Instance Identifier: {instance['DBInstanceIdentifier']}")
#         print(f"Engine: {instance['Engine']}")
#         print(f"Status: {instance['DBInstanceStatus']}")
#         print(f"Endpoint: {instance['Endpoint']['Address']}:{instance['Endpoint']['Port']}")
#         print()
# Initialize the RDS client

print(os.getenv('AWS_ACCESS_KEY_ID'))
# print(os.environ)
os.environ['AWS_DEFAULT_REGION'] = 'uw-west-2'
rds_client = boto3.client('rds')

##

import boto3
from botocore.exceptions import ClientError


def get_secret():
    # secret_name = "rds-db-credentials/databaseaudit/amazon/1712009767156"
    secret_name= "test"
    region_name = "us-west-2"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        # For a list of exceptions thrown, see
        # https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
        raise e

    secret = get_secret_value_response['SecretString']

    # Parse the secret JSON string to extract database credentials
    import json
    secret_dict = json.loads(secret)
    print(secret_dict)
    # username = secret_dict['username']
    username = secret_dict['username']
    password = secret_dict['password']
    hostname = 'test.chwugwgcq0uu.us-west-2.rds.amazonaws.com'
    port = '5432'
    dbname = 'postgres'

    # Establish a connection to the RDS instance using the retrieved credentials
    import psycopg2
    try:
        conn = psycopg2.connect(
            dbname=dbname,
            user=username,
            password=password,
            host=hostname,
            port=port
        )
        print("Connection to RDS instance successful!")
        return conn
    except Exception as e:
        print("Error:", e)
        raise e


# get_secret()

##

# print(rds_client)
# # Get information about your RDS instance
# response = rds_client.describe_db_instances(DBInstanceIdentifier='databaseaudit')

# print(response)
# # Extract endpoint address
# endpoint_address = response['DBInstances'][0]['Endpoint']['Address']

# print("RDS Endpoint Address:", endpoint_address)


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'my_app',
   'drf_yasg',
   'corsheaders',
#    'my_app.data_process'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'my_app.urls'
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CSRF_USE_SESSIONS=False
CORS_ALLOWED_ORIGINS = [
    "http://10.19.128.82:3000",
]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['/Users/stlp/Desktop/amazon/.venv/lib/python3.10/site-packages/drf_yasg/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lastMile.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# print(rds_credentials)
print(os.environ)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': 'postgres',
        # 'USER': 'postgres',
        # 'PASSWORD': 'qwerty1234',
        'NAME': 'postgres',
        'USER': 'postgres',
        # 'PASSWORD': 'test',
        'PASSWORD': 'postgres',
        'HOST':'devsanyam.chwugwgcq0uu.us-west-2.rds.amazonaws.com',
        # 'HOST':'localhost',
        'PORT':'5432',
    }
}

## 
#aws access key- AKIAZI2LFLFOWRWJLPGO
# secret access key- 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


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

